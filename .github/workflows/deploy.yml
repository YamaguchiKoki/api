name: deploy

on:
  push:
    branches:
      - main
      - feature/push_images_to_ecr

env:
  AWS_REGION: ap-northeast-1
  IMAGE_TAG: ${{ github.sha }}
  SYSTEM_NAME: portfolio
  SERVICE_NAME: playlisthub

jobs:
  deploy:
    name: Deploy app to AWS Fargate
    runs-on: ubuntu-latest

    steps:
      - name: Configure aws credentials for prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
          role-duration-seconds: 1800

      - name: Set env vars for prod
        run: echo "ENV_NAME=prod" >> $GITHUB_ENV

      - uses: actions/checkout@v2

      - run: docker-compose up -d --build app web

      - name: Check permissions
        run: docker-compose exec -T app bash -c "ls -l /work/src"

      - name: Cache composer
        id: cache-composer
        uses: actions/cache@v2
        with:
          path: src/vendor
          key: composer-v1-${{ hashFiles('src/composer.lock') }}

      - name: Create vendor directory
        run: docker-compose exec -T --user root app bash -c "mkdir -p /work/src/vendor && chown -R phper:phper /work/src/vendor" #適切な権限設定に変える

      - name: Install composer dependencies
        run: docker-compose exec -T --user root app composer install -n --prefer-dist --no-dev #適切な権限設定に変える

      - uses: aws-actions/amazon-ecr-login@v1
        id: amazon-ecr-login

      - name: Debug information
        run: |
          ls -la src
          docker-compose exec -T app ls -la /work/src
          docker-compose exec -T app id

      - name: Push nginx image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-nginx
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/nginx/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Push php image to ecr
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.amazon-ecr-login.outputs.registry }}
          ECR_REPOSITORY: ${{ env.SYSTEM_NAME }}-${{ env.ENV_NAME }}-${{ env.SERVICE_NAME }}-php
        run: |
          docker build \
            --cache-from=$ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 . \
            -f infra/docker/php/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
